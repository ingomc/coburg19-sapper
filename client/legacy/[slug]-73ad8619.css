.container.svelte-17aps39{--font-size-small:60%;display:grid;grid-gap:var(--spacing);width:100%}.container--aside.svelte-17aps39{grid-template-columns:1fr 1fr 1fr}.row.svelte-17aps39{align-items:center;display:flex;justify-content:space-between}.social.svelte-17aps39{align-items:center;display:flex;justify-content:center}.daysinfo-container.svelte-17aps39{max-width:100%;overflow-x:auto}.daysinfo-row.svelte-17aps39{font-size:80%;display:flex;flex-wrap:nowrap;justify-content:flex-start;align-items:center}.daysinfo.svelte-17aps39{font-weight:600;color:var(--info-bg);text-align:center;background-color:var(--bg-200);border-radius:4px;padding:var(--spacing);margin-right:var(--spacing);white-space:nowrap}.daysinfo.above.svelte-17aps39{color:var(--danger-bg)}.title.svelte-17aps39{color:var(--bg-50);text-align:center;margin:0 1em}.percent.svelte-17aps39{color:var(--bg-50);font-weight:100;padding-right:var(--spacing-sm)}.card.svelte-17aps39{background-color:var(--card-bg);border-radius:4px;color:var(--card-color);max-width:100%;overflow:hidden;padding:var(--spacing)}.card--light.svelte-17aps39{align-items:center;display:flex;flex-direction:column;font-size:var(--font-size-small);justify-content:space-between;text-align:center;--card-bg:var(--bg-200);--card-color:var(--color)}.card--ghost.svelte-17aps39{border:1px solid var(--bg-200);--card-bg:var(--body-bg);--card-color:var(--color)}.text--big.svelte-17aps39{display:block;font-size:1.5em;font-weight:600;max-width:100%;overflow:hidden;padding-top:var(--spacing-xs);text-overflow:ellipsis}.incidence.svelte-17aps39{flex:0 0 auto;padding-left:1rem}.label.svelte-17aps39{max-width:100%;overflow:hidden;padding-right:var(--spacing);text-overflow:ellipsis}.number.svelte-17aps39{font-weight:600}.number--big.svelte-17aps39{font-size:2em;padding-top:var(--spacing-xs)}.charts-section.svelte-17aps39{display:grid;grid-gap:var(--spacing);grid-template-columns:1fr;margin:2rem 0;text-align:center}section.svelte-17aps39{background-color:var(--bg-200);border-radius:var(--border-radius);display:flex;flex-direction:column;justify-content:space-between;padding:var(--spacing-xs) var(--spacing)}.new.svelte-17aps39{background-color:var(--warning-bg);border-radius:var(--border-radius);color:var(--warning-contrast);font-size:0.8em;margin:0 0.2rem;padding:0.1rem 0.25rem}@media(min-width: 1024px){.container--header.svelte-17aps39{grid-template-columns:1fr 1fr}.container--details.svelte-17aps39{grid-template-columns:1fr 1fr}.charts-section.svelte-17aps39{grid-template-columns:1fr 1fr}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiW3NsdWddLnN2ZWx0ZSIsInNvdXJjZXMiOlsiW3NsdWddLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3R5bGU+XG4gIC5jb250YWluZXIge1xuICAgIC0tZm9udC1zaXplLXNtYWxsOiA2MCU7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLWdhcDogdmFyKC0tc3BhY2luZyk7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICAuY29udGFpbmVyLS1hc2lkZSB7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmcjtcbiAgfVxuXG4gIC5yb3cge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gIH1cblxuICAuc29jaWFsIHtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIH1cblxuICAuZGF5c2luZm8tY29udGFpbmVyIHtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgb3ZlcmZsb3cteDogYXV0bztcbiAgfVxuXG4gIC5kYXlzaW5mby1yb3cge1xuICAgIGZvbnQtc2l6ZTogODAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC13cmFwOiBub3dyYXA7XG5cbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuICAuZGF5c2luZm8ge1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgY29sb3I6IHZhcigtLWluZm8tYmcpO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iZy0yMDApO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBwYWRkaW5nOiB2YXIoLS1zcGFjaW5nKTtcbiAgICBtYXJnaW4tcmlnaHQ6IHZhcigtLXNwYWNpbmcpO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIH1cbiAgLmRheXNpbmZvLmFib3ZlIHtcbiAgICBjb2xvcjogdmFyKC0tZGFuZ2VyLWJnKTtcbiAgfVxuXG4gIC50aXRsZSB7XG4gICAgY29sb3I6IHZhcigtLWJnLTUwKTtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgbWFyZ2luOiAwIDFlbTtcbiAgfVxuXG4gIC5wZXJjZW50IHtcbiAgICBjb2xvcjogdmFyKC0tYmctNTApO1xuICAgIGZvbnQtd2VpZ2h0OiAxMDA7XG4gICAgcGFkZGluZy1yaWdodDogdmFyKC0tc3BhY2luZy1zbSk7XG4gIH1cblxuICAuY2FyZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY2FyZC1iZyk7XG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgIGNvbG9yOiB2YXIoLS1jYXJkLWNvbG9yKTtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwYWRkaW5nOiB2YXIoLS1zcGFjaW5nKTtcbiAgfVxuXG4gIC5jYXJkLS1saWdodCB7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgZm9udC1zaXplOiB2YXIoLS1mb250LXNpemUtc21hbGwpO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgLS1jYXJkLWJnOiB2YXIoLS1iZy0yMDApO1xuICAgIC0tY2FyZC1jb2xvcjogdmFyKC0tY29sb3IpO1xuICB9XG5cbiAgLmNhcmQtLWdob3N0IHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iZy0yMDApO1xuICAgIC0tY2FyZC1iZzogdmFyKC0tYm9keS1iZyk7XG4gICAgLS1jYXJkLWNvbG9yOiB2YXIoLS1jb2xvcik7XG4gIH1cblxuICAudGV4dC0tYmlnIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBmb250LXNpemU6IDEuNWVtO1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcGFkZGluZy10b3A6IHZhcigtLXNwYWNpbmcteHMpO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICB9XG5cbiAgLmluY2lkZW5jZSB7XG4gICAgZmxleDogMCAwIGF1dG87XG4gICAgcGFkZGluZy1sZWZ0OiAxcmVtO1xuICB9XG5cbiAgLmxhYmVsIHtcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICBwYWRkaW5nLXJpZ2h0OiB2YXIoLS1zcGFjaW5nKTtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgfVxuXG4gIC5udW1iZXIge1xuICAgIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIH1cblxuICAubnVtYmVyLS1iaWcge1xuICAgIGZvbnQtc2l6ZTogMmVtO1xuICAgIHBhZGRpbmctdG9wOiB2YXIoLS1zcGFjaW5nLXhzKTtcbiAgfVxuXG4gIC5jaGFydHMtc2VjdGlvbiB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLWdhcDogdmFyKC0tc3BhY2luZyk7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XG4gICAgbWFyZ2luOiAycmVtIDA7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICB9XG5cbiAgc2VjdGlvbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmctMjAwKTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1ib3JkZXItcmFkaXVzKTtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIHBhZGRpbmc6IHZhcigtLXNwYWNpbmcteHMpIHZhcigtLXNwYWNpbmcpO1xuICB9XG5cbiAgLm5ldyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2FybmluZy1iZyk7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7XG4gICAgY29sb3I6IHZhcigtLXdhcm5pbmctY29udHJhc3QpO1xuICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgbWFyZ2luOiAwIDAuMnJlbTtcbiAgICBwYWRkaW5nOiAwLjFyZW0gMC4yNXJlbTtcbiAgfVxuXG4gIEBtZWRpYSAobWluLXdpZHRoOiAxMDI0cHgpIHtcbiAgICAuY29udGFpbmVyLS1oZWFkZXIge1xuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xuICAgIH1cblxuICAgIC5jb250YWluZXItLWRldGFpbHMge1xuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xuICAgIH1cblxuICAgIC5jaGFydHMtc2VjdGlvbiB7XG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XG4gICAgfVxuICB9XG48L3N0eWxlPlxuXG48c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoeyBwYXJhbXMgfSkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuZmV0Y2goYCR7cGFyYW1zLnNsdWd9Lmpzb25gKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcblxuICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgIHJldHVybiB7IGNpdHk6IGRhdGEsIHNsdWc6IHBhcmFtcy5zbHVnIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZXJyb3IocmVzLnN0YXR1cywgZGF0YS5tZXNzYWdlKTtcbiAgICB9XG4gIH1cbjwvc2NyaXB0PlxuXG48c2NyaXB0PlxuICBpbXBvcnQgeyB0aWNrIH0gZnJvbSAnc3ZlbHRlJztcbiAgaW1wb3J0IHsgYXN5bmNfZGF0YSB9IGZyb20gJy4uL3N0b3Jlcy9zdG9yZXMnO1xuICBpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG4gIGltcG9ydCBMaW5lIGZyb20gJ3N2ZWx0ZS1jaGFydGpzL3NyYy9MaW5lLnN2ZWx0ZSc7XG4gIGltcG9ydCBCYXIgZnJvbSAnc3ZlbHRlLWNoYXJ0anMvc3JjL0Jhci5zdmVsdGUnO1xuICBpbXBvcnQgU29jaWFsIGZyb20gJy4uL2NvbXBvbmVudHMvU29jaWFsLnN2ZWx0ZSc7XG4gIGltcG9ydCBUaW1ldHJhdmVsIGZyb20gJy4uL2NvbXBvbmVudHMvVGltZXRyYXZlbC5zdmVsdGUnO1xuICBpbXBvcnQgTWVzc2FnZSBmcm9tICcuLi9jb21wb25lbnRzL01lc3NhZ2Uuc3ZlbHRlJztcblxuICBleHBvcnQgbGV0IGNpdHk7XG4gIGV4cG9ydCBsZXQgcmVtb3VudCA9IGZhbHNlO1xuXG4gIGxldCBjaXR5SWQgPSBjaXR5LmlkO1xuXG4gIC8vIGhvdyBtYW55IG1vbnRocyBpbiBncmFwaHNcbiAgbGV0IG1vbnRocyA9IDI7XG5cbiAgLy8gb3B0aW9ucyBmb3IgZ3JhcGhzXG4gIC8vIFRvZG86IHJlZHVjZXIgbWl0IG5ldWVzdGVtIHVuZCDDpGx0ZXN0ZW0gRGF0dW1cbiAgbGV0IG9wdGlvbnMgPSB7XG4gICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICBtYWludGFpbkFzcGVjdFJhdGlvOiB0cnVlLFxuICAgIGFzcGVjdFJhdGlvOiAxLjUsXG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICBlYXNpbmc6ICdlYXNlSW5PdXRRdWFkJyxcbiAgICAgIGR1cmF0aW9uOiA1MjAsXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICBsYWJlbHM6IHtcbiAgICAgICAgZm9udENvbG9yOiAncmdiKDI1NSwgMjU1LCAyNTUpJyxcbiAgICAgICAgdXNlUG9pbnRTdHlsZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBzY2FsZXM6IHtcbiAgICAgIHhBeGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0eXBlOiAndGltZScsXG4gICAgICAgICAgY29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LDEpJyxcbiAgICAgICAgICB0aW1lOiB7XG4gICAgICAgICAgICB1bml0OiAnZGF5cycsXG4gICAgICAgICAgICB0b29sdGlwRm9ybWF0OiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBkaXNwbGF5Rm9ybWF0czoge1xuICAgICAgICAgICAgICBtb250aHM6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgICAgZGF5czogJ0RELk1NLicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGZvbnRDb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMSknLFxuICAgICAgICAgICAgbWluOiBtb21lbnQoKS5zdWJ0cmFjdChtb250aHMsICdtb250aHMnKSxcbiAgICAgICAgICAgIG1heDogbmV3IERhdGUoKSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDIwMCwgMjAwLCAyMDAsIDAuMSknLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgeUF4ZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHNjYWxlTGFiZWw6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBsYWJlbFN0cmluZzogJ0FuemFobCBGw6RsbGUnLFxuICAgICAgICAgICAgZm9udENvbG9yOiAnd2hpdGUnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIG1heFRpY2tzTGltaXQ6IDUsXG4gICAgICAgICAgICBiZWdpbkF0WmVybzogZmFsc2UsXG4gICAgICAgICAgICBmb250Q29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LDEpJyxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdyaWRMaW5lczoge1xuICAgICAgICAgICAgY29sb3I6ICdyZ2JhKDIwMCwgMjAwLCAyMDAsIDAuMSknLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIH07XG5cbiAgLy8gbWFuYWdlIHdhcm5pbmcgc3RhdGVcbiAgbGV0IHdhcm5pbmdjbGFzcyA9ICd3YXJuaW5nJztcbiAgbGV0IGFtcGVsQ29sb3IgPSAnR0VMQic7XG5cbiAgbGV0IGRheXNpbmZvID0ge1xuICAgIDE2NTogeyBhYm92ZTogMCwgYmVsb3c6IDAgfSxcbiAgICAxNTA6IHsgYWJvdmU6IDAsIGJlbG93OiAwIH0sXG4gICAgMTAwOiB7IGFib3ZlOiAwLCBiZWxvdzogMCB9LFxuICAgIDUwOiB7IGFib3ZlOiAwLCBiZWxvdzogMCB9LFxuICAgIDM1OiB7IGFib3ZlOiAwLCBiZWxvdzogMCB9LFxuICB9O1xuXG4gIC8vIEJhcmNoYXJ0IGhhcyBhbiB1cGRhdGUgYnVnLCBmaXggaXQgd2l0aCBjb21wbGV0ZSByZW1vdW50IHRoZSBjb21wb25lbnRcbiAgYXN5bmMgZnVuY3Rpb24gcmVtb3VudENvbXBvbmVudCgpIHtcbiAgICBpZiAocmVtb3VudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICByZW1vdW50ID0gdHJ1ZTtcbiAgICAvLyBXYWl0IGZvciB0aGUgbmV4dCB0aWNrXG4gICAgYXdhaXQgdGljaygpO1xuICAgIHJlbW91bnQgPSBmYWxzZTtcbiAgfVxuXG4gICQ6IHtcbiAgICByZW1vdW50Q29tcG9uZW50KCk7IC8vIEJhcmNoYXJ0IGhhcyBhbiB1cGRhdGUgYnVnLCBmaXggaXQgd2l0aCBjb21wbGV0ZSByZW1vdW50IHRoZSBjb21wb25lbnRcblxuICAgIC8vIGFwcGx5IG5ldyBkYXRhXG4gICAgaWYgKCEhJGFzeW5jX2RhdGEgJiYgISEkYXN5bmNfZGF0YS5jaXR5cykge1xuICAgICAgY29uc3QgZm91bmQgPSAkYXN5bmNfZGF0YS5jaXR5cy5maW5kKChlbCkgPT4gY2l0eUlkID09IGVsLmlkKTtcbiAgICAgIGNpdHkgPSB7IC4uLmZvdW5kIH07XG4gICAgfVxuXG4gICAgY29uc3Qgc2xpY2VkRGF0YSA9IGNpdHkuYWxsSW5jaWRlbmNlcy5pbmNpZGVuY2VzLmRhdGFzZXRzWzBdLmRhdGEuc2xpY2UoMCwgNyk7XG4gICAgY29uc3QgbGltaXRzID0gWzE2NSwgMTUwLCAxMDAsIDUwLCAzNV07XG5cbiAgICBkYXlzaW5mbyA9IHtcbiAgICAgIDE2NTogeyBhYm92ZTogMCwgYmVsb3c6IDAgfSxcbiAgICAgIDE1MDogeyBhYm92ZTogMCwgYmVsb3c6IDAgfSxcbiAgICAgIDEwMDogeyBhYm92ZTogMCwgYmVsb3c6IDAgfSxcbiAgICAgIDUwOiB7IGFib3ZlOiAwLCBiZWxvdzogMCB9LFxuICAgICAgMzU6IHsgYWJvdmU6IDAsIGJlbG93OiAwIH0sXG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKHNsaWNlZERhdGEpO1xuICAgIC8vIHVudGVyIGxpbWl0XG4gICAgc2xpY2VkRGF0YS5yZXZlcnNlKCkuZm9yRWFjaCgobnVtKSA9PiB7XG4gICAgICAvLyBjb25zb2xlLmxvZyhudW0ueSk7XG4gICAgICBsaW1pdHMuZm9yRWFjaCgobGltaXQpID0+IHtcbiAgICAgICAgaWYgKG51bS55IDwgbGltaXQpIHtcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXlzaW5mb1tsaW1pdF0pO1xuICAgICAgICAgIGRheXNpbmZvW2xpbWl0XS5iZWxvdysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRheXNpbmZvW2xpbWl0XS5iZWxvdyA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gw7xiZXIgbGltaXRcbiAgICBzbGljZWREYXRhLmZvckVhY2goKG51bSkgPT4ge1xuICAgICAgLy8gY29uc29sZS5sb2cobnVtLnkpO1xuICAgICAgbGltaXRzLmZvckVhY2goKGxpbWl0KSA9PiB7XG4gICAgICAgIGlmIChudW0ueSA+PSBsaW1pdCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdhYm92ZScsIG51bS50LCBudW0ueSwgbGltaXQpO1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGxpbWl0KTtcbiAgICAgICAgICBkYXlzaW5mb1tsaW1pdF0uYWJvdmUrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXlzaW5mb1tsaW1pdF0uYWJvdmUgPSAwO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBkYXlzaW5mbyA9IE9iamVjdC5lbnRyaWVzKGRheXNpbmZvKTtcbiAgICBjb25zb2xlLmxvZyhkYXlzaW5mbyk7XG5cbiAgICAvLyBtYW5hZ2Ugd2FybmluZyBzdGF0ZVxuICAgIHdhcm5pbmdjbGFzcyA9ICd3YXJuaW5nJztcbiAgICBhbXBlbENvbG9yID0gJ0dFTEInO1xuXG4gICAgaWYgKGNpdHkuaW5jaWRlbmNlIDwgMzUpIHtcbiAgICAgIHdhcm5pbmdjbGFzcyA9ICdpbmZvJztcbiAgICAgIGFtcGVsQ29sb3IgPSAnR1LDnE4nO1xuICAgIH1cblxuICAgIGlmIChjaXR5LmluY2lkZW5jZSA+PSA1MCAmJiBjaXR5LmluY2lkZW5jZSA8IDEwMCkge1xuICAgICAgd2FybmluZ2NsYXNzID0gJ2Rhbmdlcic7XG4gICAgICBhbXBlbENvbG9yID0gJ1JPVCc7XG4gICAgfVxuXG4gICAgaWYgKGNpdHkuaW5jaWRlbmNlID49IDEwMCkge1xuICAgICAgd2FybmluZ2NsYXNzID0gJ3N1cGVyZGFuZ2VyJztcbiAgICAgIGFtcGVsQ29sb3IgPSAnRFVOS0VMLVJPVCc7XG4gICAgfVxuICB9XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+Q29yb25hLUFtcGVsIHtjaXR5Lm5hbWV9ICh7Y2l0eS5kaXN0cmljdH0pOiDimqDvuI8gQWt0dWVsbGUgQ292aWQtWmFobGVuIHVuZCBJbnppZGVuejwvdGl0bGU+XG4gIDxtZXRhXG4gICAgY29udGVudD1cIntg4pqg77iPIEFsbGUgYWt0dWVsbGVuIFphaGxlbiBmw7xyICR7Y2l0eS5uYW1lfTog4pqg77iPICR7Y2l0eS5uZXdDYXNlc30gbmV1ZSBGw6RsbGUgLSDimqDvuI8gQWt0dWVsbGUgSW56aWRlbno6IHtjaXR5LmluY2lkZW5jZX1gfVwiXG4gICAgbmFtZT1cImRlc2NyaXB0aW9uXCJcbiAgLz5cbiAgPG1ldGEgcHJvcGVydHk9XCJvZzp0aXRsZVwiIGNvbnRlbnQ9XCJ7YENvcm9uYS1BbXBlbCBmw7xyICR7Y2l0eS5uYW1lfSAoJHtjaXR5LmRpc3RyaWN0fSlgfVwiIC8+XG4gIDxtZXRhXG4gICAgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiXG4gICAgY29udGVudD1cIntg4pqg77iPIEFsbGUgYWt0dWVsbGVuIFphaGxlbiBmw7xyICR7Y2l0eS5uYW1lfTog4pqg77iPICR7Y2l0eS5uZXdDYXNlc30gbmV1ZSBGw6RsbGUgLSDimqDvuI8gQWt0dWVsbGUgSW56aWRlbno6IHtjaXR5LmluY2lkZW5jZX1gfVwiXG4gIC8+XG48L3N2ZWx0ZTpoZWFkPlxuXG57I2lmIE9iamVjdC5rZXlzKGNpdHkpLmxlbmd0aH1cbiAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXIgY29udGFpbmVyLS1oZWFkZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXIgY29udGFpbmVyLS1pbnppZGVuelwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwie2BjYXJkICR7d2FybmluZ2NsYXNzfWB9XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdj48c21hbGw+e2NpdHkuZGlzdHJpY3R9PC9zbWFsbD48L2Rpdj5cbiAgICAgICAgICAgIDxkaXY+PHNtYWxsPjcgVGFnZSBJbnppZGVueiBwcm8gMTAwLjAwMDwvc21hbGw+PC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtLWJpZ1wiPntjaXR5Lm5hbWV9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC0tYmlnIGluY2lkZW5jZVwiPlxuICAgICAgICAgICAgICB7Y2l0eS5pbmNpZGVuY2UgPiAwID8gTnVtYmVyKGNpdHkuaW5jaWRlbmNlKS50b0xvY2FsZVN0cmluZygnZGUtREUnLCB7XG4gICAgICAgICAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMSxcbiAgICAgICAgICAgICAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiAxLFxuICAgICAgICAgICAgICAgICAgfSkgOiAnMCd9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXIgY29udGFpbmVyLS1hc2lkZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLS1saWdodFwiPlxuICAgICAgICAgIDxkaXY+TmV1ZSBGw6RsbGUgdm9uIGdlc3Rlcm48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibnVtYmVyIG51bWJlci0tYmlnXCI+XG4gICAgICAgICAgICB7Y2l0eS5uZXdDYXNlcyA+IDAgPyAnKycgKyBjaXR5Lm5ld0Nhc2VzLnRvTG9jYWxlU3RyaW5nKCdkZS1ERScpIDogJzAnfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC0tbGlnaHRcIj5cbiAgICAgICAgICA8ZGl2PkbDpGxsZSBkZXIgbGV0enRlbiA3IFRhZ2U8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibnVtYmVyIG51bWJlci0tYmlnXCI+K3tjaXR5LmNhc2VzX2luXzdfZGF5cy50b0xvY2FsZVN0cmluZygnZGUtREUnKX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtLWxpZ2h0XCI+XG4gICAgICAgICAgPGRpdj5Gw6RsbGUgaW5zZ2VzYW10PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm51bWJlciBudW1iZXItLWJpZ1wiPntjaXR5LmNhc2VzLnRvTG9jYWxlU3RyaW5nKCdkZS1ERScpfTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtLWdob3N0XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZGF5c2luZm8tY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJkYXlzaW5mby1yb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5TdGFiaWxpdMOkdDo8L2Rpdj5cbiAgICAgICAgICB7I2VhY2ggZGF5c2luZm8gYXMgZGF5aW5mb31cbiAgICAgICAgICAgIHsjaWYgZGF5aW5mb1sxXS5hYm92ZSA+IDAgJiYgZGF5aW5mb1sxXS5hYm92ZSA8IDd9XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGF5c2luZm8gYWJvdmVcIj57ZGF5aW5mb1sxXS5hYm92ZX1cbiAgICAgICAgICAgICAgICB7ZGF5aW5mb1sxXS5hYm92ZSA9PSAxID8gJ1RhZycgOiAnVGFnZSd9XG4gICAgICAgICAgICAgICAgw7xiZXJcbiAgICAgICAgICAgICAgICB7ZGF5aW5mb1swXX08L3NwYW4+XG4gICAgICAgICAgICB7OmVsc2UgaWYgZGF5aW5mb1sxXS5hYm92ZSA+PSA3fVxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRheXNpbmZvIGFib3ZlXCI+PjcgVGFnZSDDvGJlciB7ZGF5aW5mb1swXX08L3NwYW4+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgeyNpZiBkYXlpbmZvWzFdLmJlbG93ID4gMCAmJiBkYXlpbmZvWzFdLmJlbG93IDwgN31cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJkYXlzaW5mb1wiPntkYXlpbmZvWzFdLmJlbG93fVxuICAgICAgICAgICAgICAgIHtkYXlpbmZvWzFdLmJlbG93ID09IDEgPyAnVGFnJyA6ICdUYWdlJ31cbiAgICAgICAgICAgICAgICB1bnRlclxuICAgICAgICAgICAgICAgIHtkYXlpbmZvWzBdfTwvc3Bhbj5cbiAgICAgICAgICAgIHs6ZWxzZSBpZiBkYXlpbmZvWzFdLmJlbG93ID49IDd9XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGF5c2luZm9cIj4+NyBUYWdlIHVudGVyIHtkYXlpbmZvWzBdfTwvc3Bhbj5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgey9lYWNofVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXIgY29udGFpbmVyLS1kZXRhaWxzXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCByb3cgY2FyZC0tZ2hvc3RcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxhYmVsXCI+VG90ZSBiaXNoZXI8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm51bWJlclwiPntjaXR5LmRlYXRocy50b0xvY2FsZVN0cmluZygnZGUtREUnKX08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgcm93IGNhcmQtLWdob3N0XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsYWJlbFwiPlRvZGVzcmF0ZTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibnVtYmVyXCI+XG4gICAgICAgICAge051bWJlcihjaXR5LmRlYXRoX3JhdGUpLnRvTG9jYWxlU3RyaW5nKCdkZS1ERScsIHtcbiAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMCxcbiAgICAgICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMixcbiAgICAgICAgICB9KX1cbiAgICAgICAgICAlXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCByb3cgY2FyZC0tZ2hvc3RcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxhYmVsXCI+RWlud29obmVyemFobDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibnVtYmVyXCI+e2NpdHkucG9wdWxhdGlvbiA/IGNpdHkucG9wdWxhdGlvbi50b0xvY2FsZVN0cmluZygnZGUnKSA6ICctJ308L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgcm93IGNhcmQtLWdob3N0XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsYWJlbFwiPjcgVGFnZSBJbnppZGVueiBpbiB7Y2l0eS5CTH08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm51bWJlclwiPlxuICAgICAgICAgIHtjaXR5LmNhc2VzN19ibF9wZXJfMTAwayA/IE51bWJlcihjaXR5LmNhc2VzN19ibF9wZXJfMTAwaykudG9Mb2NhbGVTdHJpbmcoJ2RlLURFJywge1xuICAgICAgICAgICAgICAgIG1pbmltdW1GcmFjdGlvbkRpZ2l0czogMSxcbiAgICAgICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IDEsXG4gICAgICAgICAgICAgIH0pIDogJy0nfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIHsjaWYgY2l0eS5iZXR0ZW5fZnJlaSAhPT0gbnVsbH1cbiAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPkludGVuc2l2c3RhdGlvbjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lciBjb250YWluZXItLWRldGFpbHNcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgcm93IGNhcmQtLWdob3N0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxhYmVsXCI+QmV0dGVuIGZyZWk8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibnVtYmVyXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBlcmNlbnRcIj4oe051bWJlcihjaXR5LkFudGVpbF9iZXR0ZW5fZnJlaSkudG9GaXhlZCgwKX0lKTwvc3Bhbj5cbiAgICAgICAgICAgIHtjaXR5LmJldHRlbl9mcmVpfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgcm93IGNhcmQtLWdob3N0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxhYmVsXCI+QmV0dGVuIGJlbGVndDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJudW1iZXJcIj57Y2l0eS5iZXR0ZW5fYmVsZWd0fTwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgcm93IGNhcmQtLWdob3N0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImxhYmVsXCI+QmV0dGVuIGJlbGVndCBtaXQgQ292aWQtMTk8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibnVtYmVyXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBlcmNlbnRcIj4oe051bWJlcihjaXR5LkFudGVpbF9DT1ZJRF9iZXR0ZW4pLnRvRml4ZWQoMCl9JSk8L3NwYW4+XG4gICAgICAgICAgICB7Y2l0eS5mYWVsbGVfY292aWRfYWt0dWVsbH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIHJvdyBjYXJkLS1naG9zdFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJsYWJlbFwiPkNvdmlkLTE5LUbDpGxsZSBkaWUgYmVhdG1ldCB3ZXJkZW48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibnVtYmVyXCI+e2NpdHkuZmFlbGxlX2NvdmlkX2FrdHVlbGxfYmVhdG1ldH08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICB7OmVsc2UgaWYgY2l0eS5pdHNfZXJyb3IgPT0gZmFsc2V9XG4gICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5cbiAgICAgICAgPHNtYWxsPlxuICAgICAgICAgIEtlaW5lIEludGVuc2l2c3RhdGlvbi1JbmZvcm1hdGlvbmVuIHZvcmhhbmRlbi4gSW50ZW5zaXZwYXRpZW50ZW4gd2VyZGVuIGluIGRlciBSZWdlbCBpbVxuICAgICAgICAgIG7DpGNoc3RlbiBTdGFkdGtyZWlzIGJlaGFuZGVsdDwvc21hbGw+XG4gICAgICA8L2Rpdj5cbiAgICB7OmVsc2V9XG4gICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5cbiAgICAgICAgPHNtYWxsPlxuICAgICAgICAgIEtlaW5lIEludGVuc2l2c3RhdGlvbi1JbmZvcm1hdGlvbmVuIHZvcmhhbmRlbi4gSW50ZW5zaXZwYXRpZW50ZW4gd2VyZGVuIGluIGRlciBSZWdlbCBpbVxuICAgICAgICAgIG7DpGNoc3RlbiBTdGFkdGtyZWlzIGJlaGFuZGVsdDwvc21hbGw+XG4gICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuICA8L2Rpdj5cblxuICA8ZGl2IGNsYXNzPVwiY2hhcnRzLXNlY3Rpb25cIiBpZD1cImhpbndlaXNcIj5cbiAgICB7I2lmICEhY2l0eS5hbGxDYXNlcyAmJiBjaXR5LmFsbENhc2VzLnJlY292ZXJlZH1cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8aDI+QWt0aXZlIEbDpGxsZSBpbiB7Y2l0eS5uYW1lfTwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIDxzbWFsbD4qPGI+SGlud2Vpczo8L2I+XG4gICAgICAgICAgICBHZW5lc2VuZSBQYXRpZW50ZW4ga8O2bm5lbiBuaWVtYWxzIHp1IDEwMCUgcmljaHRpZyBpbiBkZXIgU3RhdGlzdGlrIGF1ZnRhdWNoZW4sIGRlc3dlZ2VuXG4gICAgICAgICAgICBpc3QgZGllc2UgU3RhdGlzdGlrIHdhaHJzY2hlaW5saWNoIG5pY2h0IHp1IDEwMCUga29ycmVrdC48L3NtYWxsPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxMaW5lIGRhdGE9XCJ7Y2l0eS5hbGxDYXNlcy5yZWNvdmVyZWR9XCIgb3B0aW9ucz1cIntvcHRpb25zfVwiIC8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgey9pZn1cbiAgICA8IS0tIEJhcmNoYXJ0IGhhcyBhbiB1cGRhdGUgYnVnLCBmaXggaXQgd2l0aCBjb21wbGV0ZSByZW1vdW50IHRoZSBjb21wb25lbnQgLS0+XG4gICAgeyNpZiBjaXR5LmFsbEluY2lkZW5jZXMgJiYgY2l0eS5hbGxJbmNpZGVuY2VzLmluY2lkZW5jZXMgJiYgIXJlbW91bnR9XG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPGgyPkluemlkZW56LVZlcmxhdWYge2NpdHkubmFtZX08L2gyPlxuICAgICAgICA8QmFyIGRhdGE9XCJ7Y2l0eS5hbGxJbmNpZGVuY2VzLmluY2lkZW5jZXN9XCIgb3B0aW9ucz1cIntvcHRpb25zfVwiIC8+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgey9pZn1cblxuICAgIDwhLS0gQmFyY2hhcnQgaGFzIGFuIHVwZGF0ZSBidWcsIGZpeCBpdCB3aXRoIGNvbXBsZXRlIHJlbW91bnQgdGhlIGNvbXBvbmVudCAtLT5cbiAgICB7I2lmIGNpdHkuYWxsQ2FzZXMgJiYgY2l0eS5hbGxDYXNlcy5jYXNlc3BlcmRheSAmJiAhcmVtb3VudH1cbiAgICAgIDxzZWN0aW9uPlxuICAgICAgICA8aDI+TmV1ZSBGw6RsbGUgcHJvIFRhZyBpbiB7Y2l0eS5uYW1lfTwvaDI+XG4gICAgICAgIDxCYXIgZGF0YT1cIntjaXR5LmFsbENhc2VzLmNhc2VzcGVyZGF5fVwiIG9wdGlvbnM9XCJ7b3B0aW9uc31cIiAvPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIHsvaWZ9XG5cbiAgICB7I2lmICEhY2l0eS5hbGxDYXNlcyAmJiBjaXR5LmFsbENhc2VzLnNpY2t9XG4gICAgICA8c2VjdGlvbj5cbiAgICAgICAgPGgyPkFsbGUgRsOkbGxlIGJpc2hlciBpbiB7Y2l0eS5uYW1lfTwvaDI+XG4gICAgICAgIDxMaW5lIGRhdGE9XCJ7Y2l0eS5hbGxDYXNlcy5zaWNrfVwiIG9wdGlvbnM9XCJ7b3B0aW9uc31cIiAvPlxuICAgICAgPC9zZWN0aW9uPlxuICAgIHsvaWZ9XG4gIDwvZGl2PlxuICA8ZGl2IGNsYXNzPVwic29jaWFsXCI+XG4gICAgPFNvY2lhbCAvPlxuICA8L2Rpdj5cblxuICA8ZGl2IGNsYXNzPVwic2VvXCIgaXRlbXNjb3BlIGl0ZW10eXBlPVwiaHR0cHM6Ly9zY2hlbWEub3JnL0ZBUVBhZ2VcIj5cbiAgICA8ZGl2IGl0ZW1zY29wZSBpdGVtcHJvcD1cIm1haW5FbnRpdHlcIiBpdGVtdHlwZT1cImh0dHBzOi8vc2NoZW1hLm9yZy9RdWVzdGlvblwiPlxuICAgICAgPGgxPkRpZSBDb3JvbmEtQW1wZWwgZsO8ciB7Y2l0eS5uYW1lfSAoe2NpdHkuZGlzdHJpY3R9KSBpc3QgYWt0dWVsbCBhdWYge2FtcGVsQ29sb3J9ITwvaDE+XG4gICAgICA8aDIgaXRlbXByb3A9XCJuYW1lXCI+QWt0dWVsbGUgSW56aWRlbnogaW4ge2NpdHkubmFtZX0gKHtjaXR5LmRpc3RyaWN0fSk8L2gyPlxuICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXByb3A9XCJhY2NlcHRlZEFuc3dlclwiIGl0ZW10eXBlPVwiaHR0cHM6Ly9zY2hlbWEub3JnL0Fuc3dlclwiPlxuICAgICAgICA8ZGl2IGl0ZW1wcm9wPVwidGV4dFwiPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgRGllIDctVGFnZSBJbnppZGVueiBwcm8gMTAwLjAwMCBFaW53b2huZXIgaW5cbiAgICAgICAgICAgIHtjaXR5Lm5hbWV9XG4gICAgICAgICAgICBpc3QgYWt0dWVsbFxuICAgICAgICAgICAgPHN0cm9uZz5cbiAgICAgICAgICAgICAge2NpdHkuaW5jaWRlbmNlID4gMCA/IE51bWJlcihjaXR5LmluY2lkZW5jZSkudG9Mb2NhbGVTdHJpbmcoJ2RlLURFJywge1xuICAgICAgICAgICAgICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IDEsXG4gICAgICAgICAgICAgICAgICAgIG1heGltdW1GcmFjdGlvbkRpZ2l0czogMSxcbiAgICAgICAgICAgICAgICAgIH0pIDogJzAnfS5cbiAgICAgICAgICAgIDwvc3Ryb25nPlxuICAgICAgICAgICAgPCEtLSB7I2lmIHdhcm5pbmdjbGFzcyA9PSAnaW5mbyd9XG4gICAgICAgICAgICAgIERhcyBpc3QgZGllIGdlcmluZ3N0ZSBDb3JvbmEgV2FybnN0dWZlIGbDvHIgZGVuIEJlcmVpY2hcbiAgICAgICAgICAgICAge2NpdHkuZGlzdHJpY3R9XG4gICAgICAgICAgICAgIHtjaXR5Lm5hbWV9LlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsjaWYgd2FybmluZ2NsYXNzID09ICd3YXJuaW5nJ31cbiAgICAgICAgICAgICAgU29taXQgZ2lsdCBpbSBCZXJlaWNoXG4gICAgICAgICAgICAgIHtjaXR5LmRpc3RyaWN0fVxuICAgICAgICAgICAgICB7Y2l0eS5uYW1lfVxuICAgICAgICAgICAgICBkaWUgZ2VsYmUgKG1pdHRsZXJlKSBDb3JvbmEgV2FybnN0dWZlLlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsjaWYgd2FybmluZ2NsYXNzID09ICdkYW5nZXInfVxuICAgICAgICAgICAgICBTb21pdCBnaWx0IGltIEJlcmVpY2hcbiAgICAgICAgICAgICAge2NpdHkuZGlzdHJpY3R9XG4gICAgICAgICAgICAgIHtjaXR5Lm5hbWV9XG4gICAgICAgICAgICAgIGRpZSByb3RlIChob2hlKSBDb3JvbmEgV2FybnN0dWZlIOKaoO+4jy5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICB7I2lmIHdhcm5pbmdjbGFzcyA9PSAnc3VwZXJkYW5nZXInfVxuICAgICAgICAgICAgICBTb21pdCBnaWx0IGltIEJlcmVpY2hcbiAgICAgICAgICAgICAge2NpdHkuZGlzdHJpY3R9XG4gICAgICAgICAgICAgIHtjaXR5Lm5hbWV9XG4gICAgICAgICAgICAgIGRpZSBkdW5rZWxyb3RlIChow7ZjaHN0ZSkgQ29yb25hIFdhcm5zdHVmZSDimqDvuI8uXG4gICAgICAgICAgICB7L2lmfSAtLT5cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICB7YFxuICAgICAgICAgICR7Y2l0eS5kaXN0cmljdH0gJHtjaXR5Lm5hbWV9IGhhdCBpbnNnZXNhbXQgJHtjaXR5LnBvcHVsYXRpb24gPyBjaXR5LnBvcHVsYXRpb24udG9Mb2NhbGVTdHJpbmcoJ2RlJykgOiAnLSd9IEVpbndvaG5lci4gXG4gICAgICAgICAgRXMgZ2FiIGJpc2hlciBzY2hvbiAke2NpdHkuY2FzZXMudG9Mb2NhbGVTdHJpbmcoJ2RlLURFJyl9IHBvc2l0aXZlIFRlc3RzIGluIGRlciBSZWdpb24uIEluc2dlc2FtdCBzaW5kIGhpZXIgc2Nob24gXG4gICAgICAgICAgJHtjaXR5LmRlYXRoc30gIE1lbnNjaGVuIG1pdCBvZGVyIGFuIGRlbiBGb2xnZW4gZGVzIENvcm9uYS1WaXJ1cyBnZXN0b3JiZW4uXG4gICAgICAgICAgYH1cbiAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICB7I2lmIGNpdHkuYmV0dGVuX2ZyZWkgPiAwICYmIGNpdHkuYmV0dGVuX2JlbGVndCA+IDAgJiYgY2l0eS5BbnRlaWxfYmV0dGVuX2ZyZWkgPiAwfVxuICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXByb3A9XCJtYWluRW50aXR5XCIgaXRlbXR5cGU9XCJodHRwczovL3NjaGVtYS5vcmcvUXVlc3Rpb25cIj5cbiAgICAgICAgPGgyIGl0ZW1wcm9wPVwibmFtZVwiPlxuICAgICAgICAgIFdpZXZpZWwgSW50ZW5zaXZiZXR0ZW4gc2luZCBpblxuICAgICAgICAgIHtjaXR5Lm5hbWV9XG4gICAgICAgICAgKHtjaXR5LmRpc3RyaWN0fSkgZnJlaSBvZGVyIGJlbGVndD9cbiAgICAgICAgPC9oMj5cbiAgICAgICAgPGRpdiBpdGVtc2NvcGUgaXRlbXByb3A9XCJhY2NlcHRlZEFuc3dlclwiIGl0ZW10eXBlPVwiaHR0cHM6Ly9zY2hlbWEub3JnL0Fuc3dlclwiPlxuICAgICAgICAgIDxwIGl0ZW1wcm9wPVwidGV4dFwiPlxuICAgICAgICAgICAgQWt0dWVsbFxuICAgICAgICAgICAgeyNpZiBjaXR5LmJldHRlbl9mcmVpID09IDF9XG4gICAgICAgICAgICAgIGlzdCBlaW4gQmV0dCBmcmVpLFxuICAgICAgICAgICAgezplbHNlIGlmIGNpdHkuYmV0dGVuX2ZyZWkgPiAxfVxuICAgICAgICAgICAgICBzaW5kXG4gICAgICAgICAgICAgIHtjaXR5LmJldHRlbl9mcmVpfVxuICAgICAgICAgICAgICBCZXR0ZW4gZnJlaSxcbiAgICAgICAgICAgIHs6ZWxzZX1pc3Qga2VpbiBCZXR0IGZyZWksey9pZn1cbiAgICAgICAgICAgIGRhcyBlbnRzcHJpY2h0XG4gICAgICAgICAgICB7TnVtYmVyKGNpdHkuQW50ZWlsX2JldHRlbl9mcmVpKS50b0ZpeGVkKDApfSUgYWxsZXIgSW50ZW5zaXZiZXR0ZW4uXG4gICAgICAgICAgICB7I2lmIGNpdHkuYmV0dGVuX2JlbGVndCA9PSAxfVxuICAgICAgICAgICAgICBCZWxlZ3QgaXN0IGVpblxuICAgICAgICAgICAgICB7Y2l0eS5iZXR0ZW5fYmVsZWd0fVxuICAgICAgICAgICAgICBCZXR0XG4gICAgICAgICAgICB7OmVsc2UgaWYgY2l0eS5iZXR0ZW5fYmVsZWd0ID4gMX1cbiAgICAgICAgICAgICAgQmVsZWd0IHNpbmRcbiAgICAgICAgICAgICAge2NpdHkuYmV0dGVuX2JlbGVndH1cbiAgICAgICAgICAgICAgQmV0dGVuXG4gICAgICAgICAgICB7OmVsc2V9QmVsZWd0IGlzdCBrZWluIEJldHR7L2lmfVxuICAgICAgICAgICAgKHsxMDAgLSBOdW1iZXIoY2l0eS5BbnRlaWxfYmV0dGVuX2ZyZWkpLnRvRml4ZWQoMCl9JSkgZGVyIGluc2dlc2FtdFxuICAgICAgICAgICAge2NpdHkuYmV0dGVuX2ZyZWkgKyBjaXR5LmJldHRlbl9iZWxlZ3R9XG4gICAgICAgICAgICB2b3JoYW5kZW5lbiBJbnRlbnNpdmJldHRlbi4gVm9uIGRlblxuICAgICAgICAgICAge2NpdHkuYmV0dGVuX2JlbGVndH1cbiAgICAgICAgICAgIGJlbGVndGVuIEJldHRlbiBzaW5kXG4gICAgICAgICAgICB7Y2l0eS5mYWVsbGVfY292aWRfYWt0dWVsbH1cbiAgICAgICAgICAgIG1pdCBDb3ZpZC0xOSBQYXRpZW50ZW4gYmVsZWd0LCBkYXMgZW50c3ByaWNodCBldHdhXG4gICAgICAgICAgICB7TnVtYmVyKGNpdHkuQW50ZWlsX0NPVklEX2JldHRlbikudG9GaXhlZCgwKX0lLlxuICAgICAgICAgICAgeyNpZiBjaXR5LmZhZWxsZV9jb3ZpZF9ha3R1ZWxsX2JlYXRtZXQgPCAxfVxuICAgICAgICAgICAgICBBa3R1ZWxsIHdpcmQgbmllbWFuZCBiZWF0bWV0LlxuICAgICAgICAgICAgezplbHNlIGlmIGNpdHkuZmFlbGxlX2NvdmlkX2FrdHVlbGxfYmVhdG1ldCA9PSAxfVxuICAgICAgICAgICAgICBEYXZvbiB3aXJkIGFrdHVlbGwgZWluZXIgYmVhdG1ldC5cbiAgICAgICAgICAgIHs6ZWxzZX1EYXZvbiB3ZXJkZW4gYWt0dWVsbCB7Y2l0eS5mYWVsbGVfY292aWRfYWt0dWVsbF9iZWF0bWV0fSBiZWF0bWV0LnsvaWZ9XG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG4gIDwvZGl2PlxuezplbHNlfVxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyIGNvbnRhaW5lci0tZGV0YWlsc1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIHJvdyBjYXJkLS1naG9zdFwiPktlaW5lIFplaXRyZWlzZWRhdGVuIGbDvHIgZGllc2VuIFRhZyB2b3JoYW5kZW4hPC9kaXY+XG4gIDwvZGl2Plxuey9pZn1cbjxUaW1ldHJhdmVsIC8+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0UsVUFBVSxlQUFDLENBQUMsQUFDVixpQkFBaUIsQ0FBRSxHQUFHLENBQ3RCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsUUFBUSxDQUFFLElBQUksU0FBUyxDQUFDLENBQ3hCLEtBQUss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 */
