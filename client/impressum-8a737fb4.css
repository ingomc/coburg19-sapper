button.svelte-1lbg3fn{cursor:pointer}.spende.svelte-1lbg3fn{background-color:var(--warning-bg);border:0;border-radius:2rem;display:inline-block;outline:none;padding:var(--spacing-xs) var(--spacing)}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wcmVzc3VtLnN2ZWx0ZSIsInNvdXJjZXMiOlsiaW1wcmVzc3VtLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c3R5bGU+XG4gIGJ1dHRvbiB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICB9XG5cbiAgLnNwZW5kZSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0td2FybmluZy1iZyk7XG4gICAgYm9yZGVyOiAwO1xuICAgIGJvcmRlci1yYWRpdXM6IDJyZW07XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgcGFkZGluZzogdmFyKC0tc3BhY2luZy14cykgdmFyKC0tc3BhY2luZyk7XG4gIH1cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG4gIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGxldCBlMSA9ICcqKionO1xuICBsZXQgZTIgPSAnQCc7XG4gIGxldCBlMyA9ICcqKiouJztcbiAgbGV0IGFkZGkgPSBgJHtlMX0ke2UyfSR7ZTN9ZGVgO1xuXG4gIGxldCB2biA9ICcqKioqKic7XG4gIGxldCBubiA9ICcqKioqKioqKic7XG4gIGxldCBhZHJzID0gJyoqKioqKic7XG4gIGxldCBhZHJwID0gJyoqKioqJztcbiAgbGV0IGFkcnN0ID0gJyoqKioqKic7XG5cbiAgbGV0IGQgPSB7fTtcblxuICBmdW5jdGlvbiBoYW5kbGVDbGljaygpIHtcbiAgICBlMSA9IGQuZTE7XG4gICAgZTMgPSBkLmUzO1xuICAgIGFkZGkgPSBgJHtlMX0ke2UyfSR7ZTN9ZGVgO1xuICAgIHZuID0gZC5hZHJ2O1xuICAgIG5uID0gZC5hZHJuO1xuICAgIGFkcnMgPSBkLmFkcnM7XG4gICAgYWRycCA9IGQuYWRycDtcbiAgICBhZHJzdCA9IGQuYWRyc3Q7XG4gIH1cbiAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgZCA9IGF3YWl0IGZldGNoKCcuL2ltcHIuanNvbicpLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSk7XG4gIH0pO1xuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6aGVhZD5cbiAgPHRpdGxlPkltcHJlc3N1bSAtIENvcm9uYS1BbXBlbDwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48ZGl2IGNsYXNzPVwiaW1wcmVzc3VtXCI+XG4gIDxoMT5JbXByZXNzdW08L2gxPlxuXG4gIDxkaXY+SGlud2Vpczo8L2Rpdj5cbiAgPHVsPlxuICAgIDxsaT5BYnNvbHV0IGtlaW5lIERhdGVuIHdlcmRlbiB3ZWl0ZXJnZWdlYmVuPC9saT5cbiAgICA8bGk+RXMgd2VyZGVuIGtlaW5lIENvb2tpZXMgZ2VzcGVpY2hlcnQ8L2xpPlxuICA8L3VsPlxuXG4gIDxwPlxuICAgIFdlciBkaWVzZSBTZWl0ZSBndXQgZmluZGV0IHVuZCBtaXIgdmllbGxlaWNodCBlaW4g8J+lmSBvZGVyIPCfjZUgYXVzZ2ViZW4gbWFnLCBkZXIga2FubiBtaXIgZ2VybmVcbiAgICBldHdhcyBTcGVuZGVuOlxuICA8L3A+XG5cbiAgPGFcbiAgICBocmVmPVwiaHR0cHM6Ly9rby1maS5jb20vY29yb25hYW1wZWwvP2hpZGVmZWVkPXRydWUmd2lkZ2V0PXRydWUmZW1iZWQ9dHJ1ZVwiXG4gICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICByZWw9XCJub29wZW5lclwiXG4gID48YnV0dG9uIGNsYXNzPVwic3BlbmRlXCIgdHlwZT1cInN1Ym1pdFwiPkpldHp0IFNwZW5kZW48L2J1dHRvbj5cbiAgPC9hPlxuICA8cD5cbiAgICBNaXQgZWluZXIgU3BlbmRlIGthbm5zdCBkdSBkYWbDvHIgc29yZ2VuLCBkYXNzIGljaCBoaWVyIG5pZSBXZXJidW5nIGVpbmJpbmRlbiBvZGVyIG1laW5lIERhdGVuIGFuXG4gICAgRHJpdHRlIHdlaXRlcnZlcmthdWZlbiB3ZXJkZS5cbiAgPC9wPlxuXG4gIDxwPkRhbmtlIGFuIG1laW5lIGJpc2hlcmlnZW4gR8O2bm5lciDinaTvuI/inaTvuI/inaTvuI86PC9wPlxuICA8IS0tIDx1bD5cbiAgICA8bGk+TmljaTwvbGk+XG4gICAgPGxpPkhvaG5pPC9saT5cbiAgICA8bGk+TmluYSBILjwvbGk+XG4gICAgPGxpPkZsbzwvbGk+XG4gICAgPGxpPkRhbmllbGE8L2xpPlxuICAgIDxsaT5LZXJzdGluPC9saT5cbiAgICA8bGk+U3RlZmZlbjwvbGk+XG4gICAgPGxpPkxlb25oYXJkPC9saT5cbiAgICA8bGk+XG4gICAgICA8YSBocmVmPVwiaHR0cHM6Ly93d3cua2lsbGVyYXJ0d29yeC5kZS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5DaHJpczwvYT5cbiAgICAgIChzY2hhdXQgbWFsIGluIHNlaW5lIERlc2lnbnMpXG4gICAgPC9saT5cbiAgICA8bGk+QmV0dGluYTwvbGk+XG4gICAgPGxpPlN0ZWZhbjwvbGk+XG4gICAgPGxpPkJldHRpbmEgTC48L2xpPlxuICAgIDxsaT5NaWNoYWVsPC9saT5cbiAgICA8bGk+Q2xhdWRpdXM8L2xpPlxuICAgIDxsaT5Kw7ZyZzwvbGk+XG4gICAgPGxpPkZyYW5rPC9saT5cbiAgICA8bGk+Q2hyaXN0aWFuZTwvbGk+XG4gICAgPGxpPk1vdW5ldHQ8L2xpPlxuICAgIDxsaT5TaW5hbjwvbGk+XG4gICAgPGxpPk5pa2toaWw8L2xpPlxuICAgIDxsaT5NaWNoYWVsIFIuPC9saT5cbiAgICA8bGk+TmluYSBOLjwvbGk+XG4gICAgPGxpPkhhbnMtR2Vvcmc8L2xpPlxuICAgIDxsaT5NYXJpb248L2xpPlxuICAgIDxsaT5UaG9tYXMgUC48L2xpPlxuICAgIDxsaT5UaG9tYXMgRS48L2xpPlxuICAgIDxsaT5DYXRocmluPC9saT5cbiAgICA8bGk+TWFyaWU8L2xpPlxuICAgIDxsaT5FdmE8L2xpPlxuICAgIDxsaT5Ib3JzdDwvbGk+XG4gICAgPGxpPkp1bGlhbjwvbGk+XG4gICAgPGxpPkFsZXhhbmRyYTwvbGk+XG4gIDwvdWw+IC0tPlxuICA8cD5cbiAgICA8c21hbGw+PHN0cm9uZz5IaW53ZWlzOjwvc3Ryb25nPlxuICAgICAgU3BlbmRlbiBzaW5kIGluIGRpZXNlbSBGYWxsIFNjaGVua3VuZ2VuIGRhIGljaCBlaW5lIFByaXZhdHBlcnNvbiBiaW4uPC9zbWFsbD5cbiAgPC9wPlxuXG4gIDxwPkRpZXNlIFNlaXRlIGJlbnV0enQ6PC9wPlxuICA8dWw+XG4gICAgPGxpPjxhIGhyZWY9XCJodHRwczovL3NhcHBlci5zdmVsdGUuZGV2L1wiIHRhcmdldD1cIl9ibGFua1wiPlNhcHBlcjwvYT48L2xpPlxuICAgIDxsaT48YSBocmVmPVwiaHR0cHM6Ly9tYXRvbW8ub3JnL1wiIHRhcmdldD1cIl9ibGFua1wiPk1hdG9tbyBUcmFja2luZzwvYT4gKHNlbGZob3N0ZWQpPC9saT5cbiAgPC91bD5cbiAgPHA+XG4gICAgRGF0ZW5xdWVsbGU6XG4gICAgPGFcbiAgICAgIGhyZWY9XCJodHRwczovL25wZ2VvLWNvcm9uYS1ucGdlby1kZS5odWIuYXJjZ2lzLmNvbS9kYXRhc2V0cy85MTdmYzM3YTcwOTU0MjU0OGNjM2JlMDc3YTc4NmMxN18wXCJcbiAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICBycmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICB0aXRsZT1cIlp1bSBSS0lcIlxuICAgID5SS0k8L2E+XG4gICAgPGFcbiAgICAgIGhyZWY9XCJodHRwczovL3d3dy5sZ2wuYmF5ZXJuLmRlL2dlc3VuZGhlaXQvaW5mZWt0aW9uc3NjaHV0ei9pbmZla3Rpb25za3JhbmtoZWl0ZW5fYV96L2Nvcm9uYXZpcnVzL2thcnRlX2Nvcm9uYXZpcnVzL2luZGV4Lmh0bSN3S2VubnphaGxlblwiXG4gICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICB0aXRsZT1cIkxHTCBCYXllcm5cIlxuICAgID5cbiAgICAgIEhvc3BpdGFsaXNpZXJ1bmc6IExHTFxuICAgIDwvYT5cbiAgICA8YnIgLz5cbiAgICA8c21hbGw+QWxsZSBBbmdhYmVuIGF1ZiBkZXIgZ2VzYW10ZW4gV2Vic2l0ZSBzaW5kIG9obmUgR2V3w6RociB1bmQga8O2bm5lbiBzaWNoIGplZGVyemVpdCDDpG5kZXJuLjwvc21hbGw+XG4gIDwvcD5cbiAgPHA+QW5nYWJlbiBnZW3DpMOfIMKnIDUgVE1HPC9wPlxuICA8cD57dm59IHtubn0gPGJyIC8+IHthZHJzfTxiciAvPiB7YWRycH0ge2FkcnN0fSA8YnIgLz48L3A+XG4gIDxwPjxzdHJvbmc+VmVydHJldGVuIGR1cmNoOiA8L3N0cm9uZz48YnIgLz4ge3ZufSB7bm59PGJyIC8+PC9wPlxuICA8cD48c3Ryb25nPktvbnRha3Q6PC9zdHJvbmc+IDxiciAvPiBFLU1haWw6IDxzcGFuIGNsYXNzPVwiZW1haWxcIj57YWRkaX08L3NwYW4+IDxiciAvPjwvcD5cbiAgPHA+XG4gICAgPHN0cm9uZz5WZXJhbnR3b3J0bGljaCBmw7xyIGRlbiBJbmhhbHQgbmFjaCDCpyA1NSBBYnMuIDIgUlN0Vjo8L3N0cm9uZz48YnIgLz5cbiAgICB7dm59XG4gICAge25ufVxuICAgIDxiciAvPlxuICAgIHthZHJzfTxiciAvPlxuICAgIHthZHJwfVxuICAgIHthZHJzdH1cbiAgICA8YnIgLz5cbiAgPC9wPlxuICA8cD48YnV0dG9uIG9uOmNsaWNrPVwie2hhbmRsZUNsaWNrfVwiPkRhdGVuIGltIEtsYXJ0ZXh0IGFuemVpZ2VuPC9idXR0b24+PC9wPlxuICA8c21hbGw+XG4gICAgPHA+XG4gICAgICA8c3Ryb25nPkhhZnR1bmdzYXVzc2NobHVzczogPC9zdHJvbmc+XG4gICAgICA8YnIgLz5cbiAgICAgIDxiciAvPjxzdHJvbmc+SGFmdHVuZyBmw7xyIEluaGFsdGU8L3N0cm9uZz5cbiAgICAgIDxiciAvPlxuICAgICAgPGJyIC8+XG4gICAgICBEaWUgSW5oYWx0ZSB1bnNlcmVyIFNlaXRlbiB3dXJkZW4gbWl0IGdyw7bDn3RlciBTb3JnZmFsdCBlcnN0ZWxsdC4gRsO8ciBkaWUgUmljaHRpZ2tlaXQsXG4gICAgICBWb2xsc3TDpG5kaWdrZWl0IHVuZCBBa3R1YWxpdMOkdCBkZXIgSW5oYWx0ZSBrw7ZubmVuIHdpciBqZWRvY2gga2VpbmUgR2V3w6RociDDvGJlcm5laG1lbi4gQWxzXG4gICAgICBEaWVuc3RlYW5iaWV0ZXIgc2luZCB3aXIgZ2Vtw6TDnyDCpyA3IEFicy4xIFRNRyBmw7xyIGVpZ2VuZSBJbmhhbHRlIGF1ZiBkaWVzZW4gU2VpdGVuIG5hY2ggZGVuXG4gICAgICBhbGxnZW1laW5lbiBHZXNldHplbiB2ZXJhbnR3b3J0bGljaC4gTmFjaCDCp8KnIDggYmlzIDEwIFRNRyBzaW5kIHdpciBhbHMgRGllbnN0ZWFuYmlldGVyIGplZG9jaFxuICAgICAgbmljaHQgdmVycGZsaWNodGV0LCDDvGJlcm1pdHRlbHRlIG9kZXIgZ2VzcGVpY2hlcnRlIGZyZW1kZSBJbmZvcm1hdGlvbmVuIHp1IMO8YmVyd2FjaGVuIG9kZXJcbiAgICAgIG5hY2ggVW1zdMOkbmRlbiB6dSBmb3JzY2hlbiwgZGllIGF1ZiBlaW5lIHJlY2h0c3dpZHJpZ2UgVMOkdGlna2VpdCBoaW53ZWlzZW4uIFZlcnBmbGljaHR1bmdlblxuICAgICAgenVyIEVudGZlcm51bmcgb2RlciBTcGVycnVuZyBkZXIgTnV0enVuZyB2b24gSW5mb3JtYXRpb25lbiBuYWNoIGRlbiBhbGxnZW1laW5lbiBHZXNldHplblxuICAgICAgYmxlaWJlbiBoaWVydm9uIHVuYmVyw7xocnQuIEVpbmUgZGllc2JlesO8Z2xpY2hlIEhhZnR1bmcgaXN0IGplZG9jaCBlcnN0IGFiIGRlbSBaZWl0cHVua3QgZGVyXG4gICAgICBLZW5udG5pcyBlaW5lciBrb25rcmV0ZW4gUmVjaHRzdmVybGV0enVuZyBtw7ZnbGljaC4gQmVpIEJla2FubnR3ZXJkZW4gdm9uIGVudHNwcmVjaGVuZGVuXG4gICAgICBSZWNodHN2ZXJsZXR6dW5nZW4gd2VyZGVuIHdpciBkaWVzZSBJbmhhbHRlIHVtZ2VoZW5kIGVudGZlcm5lbi48YnIgLz5cbiAgICAgIDxiciAvPlxuICAgICAgPHN0cm9uZz5IYWZ0dW5nIGbDvHIgTGlua3M8L3N0cm9uZz48YnIgLz5cbiAgICAgIDxiciAvPlxuXG4gICAgICBVbnNlciBBbmdlYm90IGVudGjDpGx0IExpbmtzIHp1IGV4dGVybmVuIFdlYnNlaXRlbiBEcml0dGVyLCBhdWYgZGVyZW4gSW5oYWx0ZSB3aXIga2VpbmVuXG4gICAgICBFaW5mbHVzcyBoYWJlbi4gRGVzaGFsYiBrw7ZubmVuIHdpciBmw7xyIGRpZXNlIGZyZW1kZW4gSW5oYWx0ZSBhdWNoIGtlaW5lIEdld8OkaHIgw7xiZXJuZWhtZW4uIEbDvHJcbiAgICAgIGRpZSBJbmhhbHRlIGRlciB2ZXJsaW5rdGVuIFNlaXRlbiBpc3Qgc3RldHMgZGVyIGpld2VpbGlnZSBBbmJpZXRlciBvZGVyIEJldHJlaWJlciBkZXIgU2VpdGVuXG4gICAgICB2ZXJhbnR3b3J0bGljaC4gRGllIHZlcmxpbmt0ZW4gU2VpdGVuIHd1cmRlbiB6dW0gWmVpdHB1bmt0IGRlciBWZXJsaW5rdW5nIGF1ZiBtw7ZnbGljaGVcbiAgICAgIFJlY2h0c3ZlcnN0w7bDn2Ugw7xiZXJwcsO8ZnQuIFJlY2h0c3dpZHJpZ2UgSW5oYWx0ZSB3YXJlbiB6dW0gWmVpdHB1bmt0IGRlciBWZXJsaW5rdW5nIG5pY2h0XG4gICAgICBlcmtlbm5iYXIuIEVpbmUgcGVybWFuZW50ZSBpbmhhbHRsaWNoZSBLb250cm9sbGUgZGVyIHZlcmxpbmt0ZW4gU2VpdGVuIGlzdCBqZWRvY2ggb2huZVxuICAgICAga29ua3JldGUgQW5oYWx0c3B1bmt0ZSBlaW5lciBSZWNodHN2ZXJsZXR6dW5nIG5pY2h0IHp1bXV0YmFyLiBCZWkgQmVrYW5udHdlcmRlbiB2b25cbiAgICAgIFJlY2h0c3ZlcmxldHp1bmdlbiB3ZXJkZW4gd2lyIGRlcmFydGlnZSBMaW5rcyB1bWdlaGVuZCBlbnRmZXJuZW4uPGJyIC8+XG4gICAgICA8YnIgLz5cbiAgICAgIDxzdHJvbmc+VXJoZWJlcnJlY2h0PC9zdHJvbmc+PGJyIC8+XG4gICAgICA8YnIgLz5cblxuICAgICAgRGllIGR1cmNoIGRpZSBTZWl0ZW5iZXRyZWliZXIgZXJzdGVsbHRlbiBJbmhhbHRlIHVuZCBXZXJrZSBhdWYgZGllc2VuIFNlaXRlbiB1bnRlcmxpZWdlbiBkZW1cbiAgICAgIGRldXRzY2hlbiBVcmhlYmVycmVjaHQuIERpZSBWZXJ2aWVsZsOkbHRpZ3VuZywgQmVhcmJlaXR1bmcsIFZlcmJyZWl0dW5nIHVuZCBqZWRlIEFydCBkZXJcbiAgICAgIFZlcndlcnR1bmcgYXXDn2VyaGFsYiBkZXIgR3JlbnplbiBkZXMgVXJoZWJlcnJlY2h0ZXMgYmVkw7xyZmVuIGRlciBzY2hyaWZ0bGljaGVuIFp1c3RpbW11bmcgZGVzXG4gICAgICBqZXdlaWxpZ2VuIEF1dG9ycyBiencuIEVyc3RlbGxlcnMuIERvd25sb2FkcyB1bmQgS29waWVuIGRpZXNlciBTZWl0ZSBzaW5kIG51ciBmw7xyIGRlblxuICAgICAgcHJpdmF0ZW4sIG5pY2h0IGtvbW1lcnppZWxsZW4gR2VicmF1Y2ggZ2VzdGF0dGV0LiBTb3dlaXQgZGllIEluaGFsdGUgYXVmIGRpZXNlciBTZWl0ZSBuaWNodFxuICAgICAgdm9tIEJldHJlaWJlciBlcnN0ZWxsdCB3dXJkZW4sIHdlcmRlbiBkaWUgVXJoZWJlcnJlY2h0ZSBEcml0dGVyIGJlYWNodGV0LiBJbnNiZXNvbmRlcmUgd2VyZGVuXG4gICAgICBJbmhhbHRlIERyaXR0ZXIgYWxzIHNvbGNoZSBnZWtlbm56ZWljaG5ldC4gU29sbHRlbiBTaWUgdHJvdHpkZW0gYXVmIGVpbmVcbiAgICAgIFVyaGViZXJyZWNodHN2ZXJsZXR6dW5nIGF1Zm1lcmtzYW0gd2VyZGVuLCBiaXR0ZW4gd2lyIHVtIGVpbmVuIGVudHNwcmVjaGVuZGVuIEhpbndlaXMuIEJlaVxuICAgICAgQmVrYW5udHdlcmRlbiB2b24gUmVjaHRzdmVybGV0enVuZ2VuIHdlcmRlbiB3aXIgZGVyYXJ0aWdlIEluaGFsdGUgdW1nZWhlbmQgZW50ZmVybmVuLjxiciAvPlxuICAgICAgPGJyIC8+XG4gICAgICA8c3Ryb25nPkRhdGVuc2NodXR6PC9zdHJvbmc+PGJyIC8+XG4gICAgICA8YnIgLz5cblxuICAgICAgRGllIE51dHp1bmcgdW5zZXJlciBXZWJzZWl0ZSBpc3QgaW4gZGVyIFJlZ2VsIG9obmUgQW5nYWJlIHBlcnNvbmVuYmV6b2dlbmVyIERhdGVuIG3DtmdsaWNoLlxuICAgICAgU293ZWl0IGF1ZiB1bnNlcmVuIFNlaXRlbiBwZXJzb25lbmJlem9nZW5lIERhdGVuIChiZWlzcGllbHN3ZWlzZSBOYW1lLCBBbnNjaHJpZnQgb2RlclxuICAgICAgZU1haWwtQWRyZXNzZW4pIGVyaG9iZW4gd2VyZGVuLCBlcmZvbGd0IGRpZXMsIHNvd2VpdCBtw7ZnbGljaCwgc3RldHMgYXVmIGZyZWl3aWxsaWdlciBCYXNpcy5cbiAgICAgIERpZXNlIERhdGVuIHdlcmRlbiBvaG5lIElocmUgYXVzZHLDvGNrbGljaGUgWnVzdGltbXVuZyBuaWNodCBhbiBEcml0dGUgd2VpdGVyZ2VnZWJlbi5cbiAgICAgIDxiciAvPlxuXG4gICAgICBXaXIgd2Vpc2VuIGRhcmF1ZiBoaW4sIGRhc3MgZGllIERhdGVuw7xiZXJ0cmFndW5nIGltIEludGVybmV0ICh6LkIuIGJlaSBkZXIgS29tbXVuaWthdGlvbiBwZXJcbiAgICAgIEUtTWFpbCkgU2ljaGVyaGVpdHNsw7xja2VuIGF1ZndlaXNlbiBrYW5uLiBFaW4gbMO8Y2tlbmxvc2VyIFNjaHV0eiBkZXIgRGF0ZW4gdm9yIGRlbSBadWdyaWZmXG4gICAgICBkdXJjaCBEcml0dGUgaXN0IG5pY2h0IG3DtmdsaWNoLlxuICAgICAgPGJyIC8+XG5cbiAgICAgIERlciBOdXR6dW5nIHZvbiBpbSBSYWhtZW4gZGVyIEltcHJlc3N1bXNwZmxpY2h0IHZlcsO2ZmZlbnRsaWNodGVuIEtvbnRha3RkYXRlbiBkdXJjaCBEcml0dGUgenVyXG4gICAgICDDnGJlcnNlbmR1bmcgdm9uIG5pY2h0IGF1c2Ryw7xja2xpY2ggYW5nZWZvcmRlcnRlciBXZXJidW5nIHVuZCBJbmZvcm1hdGlvbnNtYXRlcmlhbGllbiB3aXJkXG4gICAgICBoaWVybWl0IGF1c2Ryw7xja2xpY2ggd2lkZXJzcHJvY2hlbi4gRGllIEJldHJlaWJlciBkZXIgU2VpdGVuIGJlaGFsdGVuIHNpY2ggYXVzZHLDvGNrbGljaFxuICAgICAgcmVjaHRsaWNoZSBTY2hyaXR0ZSBpbSBGYWxsZSBkZXIgdW52ZXJsYW5ndGVuIFp1c2VuZHVuZyB2b24gV2VyYmVpbmZvcm1hdGlvbmVuLCBldHdhIGR1cmNoXG4gICAgICBTcGFtLU1haWxzLCB2b3IuPGJyIC8+XG4gICAgPC9wPlxuICA8L3NtYWxsPlxuPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0UsTUFBTSxlQUFDLENBQUMsQUFDTixNQUFNLENBQUUsT0FBTyxBQUNqQixDQUFDLEFBRUQsT0FBTyxlQUFDLENBQUMsQUFDUCxnQkFBZ0IsQ0FBRSxJQUFJLFlBQVksQ0FBQyxDQUNuQyxNQUFNLENBQUUsQ0FBQyxDQUNULGFBQWEsQ0FBRSxJQUFJLENBQ25CLE9BQU8sQ0FBRSxZQUFZLENBQ3JCLE9BQU8sQ0FBRSxJQUFJLENBQ2IsT0FBTyxDQUFFLElBQUksWUFBWSxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUMsQUFDM0MsQ0FBQyJ9 */
